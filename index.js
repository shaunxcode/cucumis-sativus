// Generated by CoffeeScript 1.3.3
(function() {
  var NL, TAB, parse, quote_chars, read,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  quote_chars = ["'", '"'];

  NL = "__NL";

  TAB = "__TAB";

  read = function(str) {
    var curKWLine, in_comment, in_long_quote, in_quote, parts, quote_char, token, _i, _len, _ref, _ref1;
    parts = [];
    curKWLine = false;
    in_comment = false;
    in_quote = false;
    in_long_quote = false;
    quote_char = false;
    _ref = str.replace(/\t/gm, " " + TAB + " ").replace(/(\r\n|\n|\r)/gm, " " + NL + " ").split(' ');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      token = _ref[_i];
      if ((!in_long_quote) && (!in_comment) && token.slice(0, 3) === '"""') {
        in_long_quote = [];
      }
      if (in_long_quote) {
        in_long_quote.push(token);
        if (token.slice(-3) === '"""') {
          token = ['long_quote', in_long_quote.join(' ')];
          in_long_quote = false;
        } else {
          continue;
        }
      }
      if ((!in_quote) && (!in_comment) && token[0] === "#") {
        in_comment = [token.slice(1)];
        continue;
      }
      if (in_comment) {
        in_comment.push(token);
        if (token === NL) {
          token = ['comment ', in_comment.join(' ')];
          in_comment = false;
        } else {
          continue;
        }
      }
      if ((!in_quote) && (_ref1 = token[0], __indexOf.call(quote_chars, _ref1) >= 0)) {
        in_quote = [];
        quote_char = token[0];
      }
      if (in_quote) {
        in_quote.push(token);
        if (token[token.length - 1] === quote_char) {
          token = in_quote.join(' ');
          in_quote = false;
        } else {
          continue;
        }
      }
      if ((!in_quote) && token[token.length - 1] === ":") {
        parts.push(curKWLine = {
          word: token.slice(0, -1).toLowerCase(),
          content: []
        });
      } else {
        if (!curKWLine) {
          throw new Error("Must start with a keyword e.g. Feature:");
        }
        curKWLine.content.push(token);
      }
    }
    return parts;
  };

  parse = function(src) {
    var clause, content, item, part, parts, step, stepParts, steps, _i, _j, _len, _len1, _ref, _ref1;
    parts = [];
    _ref = read(src);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      part = _ref[_i];
      content = part.content.join(' ').replace(new RegExp(NL, 'g'), "\n").replace(new RegExp(TAB, 'g'), "\t");
      item = {
        word: part.word,
        content: content
      };
      if ((_ref1 = part.word) === "scenario" || _ref1 === "background") {
        steps = content.split("\n");
        item.content = steps.shift();
        item.steps = [];
        for (_j = 0, _len1 = steps.length; _j < _len1; _j++) {
          step = steps[_j];
          stepParts = step.trim().split(' ');
          if (stepParts.length) {
            clause = stepParts.shift().trim();
            if (clause.length) {
              item.steps.push({
                clause: clause,
                content: stepParts.join(' ')
              });
            }
          }
        }
      }
      parts.push(item);
    }
    return parts;
  };

  module.exports = parse;

}).call(this);
